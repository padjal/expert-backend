@page "/offerreview/{offerId}"
@using ExpertAdministration.Web.ViewModels
@using Radzen
@using Radzen.Blazor
@inject NavigationManager Navigation
@inject OfferReviewViewModel ViewModel
@inject DialogService DialogService

@if (ViewModel.IsProgressIndicatorActive)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
}
else
{
    <RadzenRow>
        <RadzenColumn>
            <h3>Offer</h3>
            <RadzenStack Orientation="Orientation.Horizontal">
                <h2 style="padding-right: 1em">@ViewModel.Offer.Name</h2>
                <p>Id: @ViewModel.Offer.Id</p>
            </RadzenStack>

            <p>Description: @ViewModel.Offer.Description</p>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                <p style="padding-top: 10px">Status:</p>
                <RadzenDropDown @bind-Value=@ViewModel.OfferStatus Data=@StatusOptions Style="width: 100%; max-width: 300px;"/>
            </RadzenStack>

            <p>Created at: @ViewModel.Offer.CreatedAt</p>

            <RadzenButton Click=@OnOfferChangeStatusButtonClick Text="Change status" ButtonStyle="ButtonStyle.Info"/>

            <RadzenButton Click=@OnOfferDeleteButtonClick Text="Delete offer" ButtonStyle="ButtonStyle.Danger"/>

            <RadzenButton Click=@OnBackButtonClick Text="Go back" ButtonStyle="ButtonStyle.Primary"/>
        </RadzenColumn>
        <RadzenColumn>
            <h3>Owner</h3>
            <p>@ViewModel.Offer.Owner</p>
            <RadzenImage Path="@ViewModel.User.ProfilePictureUrl" Style="height: 5rem;"/>
            <p>@ViewModel.User.Name</p>
            <p>@ViewModel.User.Id</p>
            <p>@ViewModel.User.Email</p>
            <p>@ViewModel.User.Phone</p>
            <p>@ViewModel.User.Region</p>
        </RadzenColumn>
        <RadzenColumn>
            @foreach (var imageUrl in ViewModel.Offer.ImageUrls)
            {
                <RadzenImage Path="@imageUrl" Style="height: 15rem;"/>
            }
        </RadzenColumn>
    </RadzenRow>
}

@code {

    [Parameter]
    public string offerId { get; set; }

    public IEnumerable<string> StatusOptions = new List<string> { "New", "Review", "Active", "Archived" };

    protected override Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += (sender, args) => StateHasChanged();
        ViewModel.OnOfferStatusUpdated += ShowUpdateResult;

        ViewModel.LoadOfferDataAsync(offerId);

        return base.OnInitializedAsync();
    }

    private void OnBackButtonClick()
    {
        if (ViewModel.OfferStatusHasChanged)
        {
            Navigation.NavigateTo("/offermonitor/true");
        }
        else
        {
            Navigation.NavigateTo("/offermonitor");
        }
    }

    private async Task OnOfferDeleteButtonClick()
    {
        await ViewModel.DeleteOffer();
    }

    private async Task OnOfferChangeStatusButtonClick()
    {
        ViewModel.ChangeStatus();
    }

    private void ShowUpdateResult(object sender, string title, string message)
    {
        ShowMessageDialog(message);
    }

    async Task ShowMessageDialog(string title, string message = "test")
    {
        await DialogService.OpenAsync(title, ds =>
            @<div>
                @message
            </div>, new DialogOptions { CloseDialogOnOverlayClick = true });
    }

}   

@page "/offermonitor"
@using ExpertAdministration.Core.Models
@using ExpertAdministration.Web.Services
@using Radzen.Blazor
@using ExpertAdministration.Web.Interfaces
@using ExpertAdministration.Web.ViewModels
@using Radzen
@inject IDatabaseService DatabaseService
@inject NavigationManager Navigation
@inject OffersMonitorViewModel ViewModel

<h1>OfferMonitor</h1>

@if(ViewModel.AreOffersLoading)
{
    <p>Loading offers...</p>
}
else{
    <button @onclick="OnLoadOffersClick">Load offers</button>
}


<RadzenDataGrid Data="@ViewModel.Offers" TItem="Offer" 
                AllowAlternatingRows="true" 
                AllowFiltering="true" 
                AllowRowSelectOnRowClick="true" 
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="Offer" Property="Id" Title="Id"  />
        <RadzenDataGridColumn TItem="Offer" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Offer" Property="Owner" Title="Owner" />
        <RadzenDataGridColumn TItem="Offer" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="Offer" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="offer">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditOffer(offer))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {

    public async void OnLoadOffersClick()
    {
        await ViewModel.GetOffersAsync();
    }

    public void EditOffer(Offer offer)
    {
        //Open new window with all offer information
        Navigation.NavigateTo($"/offerreview/{offer.Id}");
    }

    protected override Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += (sender, args) => StateHasChanged();

        return base.OnInitializedAsync();
    }

}
